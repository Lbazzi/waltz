<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.hua.mapper.UserMapper">

    <select id="queryAllUsers" resultType="User">
        select id, nickname, username, password, email, avatar, type, createTime, updateTime
        from t_user
    </select>

    <select id="queryAllUsersByQuery" resultMap="UserMap">
        select id, nickname, username, password, email, avatar, type, createTime, updateTime
        from t_user
        <where>
            <if test="nickname != null and nickname != ''">
                and nickname like concat('%',#{nickname},'%')
            </if>
            <if test="username != null and username != ''">
                and username like concat('%',#{username},'%')
            </if>
            <if test="email != null and email != ''">
                and email like concat('%',#{email},'%')
            </if>
            <if test="type != null and type != ''">
                and type = #{type}
            </if>
        </where>
    </select>

    <resultMap id="UserMap" type="User">
        <result property="id" column="id"/>
        <result property="nickname" column="nickname"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="avatar" column="avatar"/>
        <result property="type" column="type"/>
        <result property="createTime" column="createTime"/>
        <result property="updateTime" column="updateTime"/>
    </resultMap>

    <select id="queryUsersByUserName" resultType="User" parameterType="string">
        select id, nickname, username, password, email, avatar, type, createTime, updateTime
        from t_user
        where username like concat('%', #{username}, '%')
    </select>

    <select id="queryUserById" resultType="User" parameterType="long">
        select id, nickname, username, password, email, avatar, type, createTime, updateTime
        from t_user
        where id = #{id}
    </select>

    <select id="queryUserByUserName" resultType="User" parameterType="string">
        select id, nickname, username, password, email, avatar, type, createTime, updateTime
        from t_user
        where username = #{username}
    </select>

    <select id="userExist" resultType="com.hua.vo.UserQuery" parameterType="com.hua.vo.UserQuery">
        select id, nickname, username, password, email, avatar, type, createTime, updateTime
        from t_user
        <where>
            <if test="nickname != null and nickname != ''"> and nickname = #{nickname}</if>
            <if test="username != null and username != ''"> and username = #{username}</if>
            <if test="email != null and email != ''"> and email = #{email}</if>
            <if test="password != null and password != ''"> and password = #{password}</if>
        </where>
        and type = false
    </select>

    <select id="userVerify" resultType="User" parameterType="String">
        select id, nickname, username, password, email, avatar, type, createTime, updateTime
        from t_user
        where username = #{username}
        and password = #{password}
    </select>

    <insert id="saveUser" parameterType="User">
        insert into t_user(
            nickname, username, password, email, avatar, type, createTime, updateTime
            ) values (
            #{nickname}, #{username}, #{password}, #{email}, #{avatar}, #{type}, #{createTime}, #{updateTime}
            )
    </insert>

    <insert id="userRegister" parameterType="com.hua.vo.UserQuery">
        insert into t_user(
            nickname, username, password, email, avatar, type, createTime, updateTime
            ) values (
            #{nickname}, #{username}, #{password}, #{email}, #{avatar}, #{type}, #{createTime}, #{updateTime}
            )
    </insert>

    <insert id="registerUser" parameterType="User">
        insert into t_user(
            nickname, username, password, email, avatar, type, createTime, updateTime
            ) values (
            #{nickname}, #{username}, #{password}, #{email}, #{avatar}, #{type}, #{createTime}, #{updateTime}
            )
    </insert>

    <update id="modifyUser" parameterType="User">
        update t_user
        set password = #{password}
        where username = #{username}
    </update>

    <update id="updateUser" parameterType="User">
        update t_user
        set nickname = #{nickname}, username = #{username}, password = #{password}, email = #{email}, avatar = #{avatar}, type = #{type}, createTime = #{createTime}, updateTime = #{updateTime}
        where id = #{id}
    </update>

    <delete id="deleteUser" parameterType="Long">
        delete
        from t_user
        where id = #{id}
    </delete>

</mapper>
